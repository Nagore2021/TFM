"""
debug_collection_fix.py - Debugger para problema de colecci√≥n

Identifica y soluciona el problema de nombres de colecci√≥n en BM25DualChunkEvaluator
"""

import os
import sys
import yaml
import logging
import chromadb

# Configurar logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Imports locales
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
logger = logging.getLogger(__name__)

def debug_collection_issue(config_path: str, mode: str = "embedding"):
    """
    Debugger completo para identificar el problema de colecci√≥n
    
    Args:
        config_path: Ruta al config.yaml
        mode: 'embedding' o 'finetuneado'
    """
    
    print("üîç DEBUGGING COLECCI√ìN - BM25DualChunkEvaluator")
    print("="*60)
    
    # 1. Verificar config.yaml
    print(f"\n1Ô∏è‚É£ VERIFICANDO CONFIG: {config_path}")
    
    if not os.path.exists(config_path):
        print(f"‚ùå Config no existe: {config_path}")
        return
    
    try:
        with open(config_path) as f:
            cfg = yaml.safe_load(f)
        print(f"‚úÖ Config cargado correctamente")
    except Exception as e:
        print(f"‚ùå Error leyendo config: {e}")
        return
    
    # 2. Mostrar configuraci√≥n de colecciones
    print(f"\n2Ô∏è‚É£ CONFIGURACI√ìN DE COLECCIONES:")
    if 'collection' in cfg:
        collection_config = cfg['collection']
        print(f"üìã Configuraci√≥n completa:")
        for key, value in collection_config.items():
            print(f"   {key}: {value}")
        
        # L√≥gica que usa BM25DualChunkEvaluator
        collection_name = collection_config['name'] if mode == 'embedding' else collection_config['name_finetuneado']
        print(f"\nüéØ COLECCI√ìN SELECCIONADA (mode='{mode}'): {collection_name}")
    else:
        print(f"‚ùå Secci√≥n 'collection' no encontrada en config")
        return
    
    # 3. Verificar ChromaDB
    print(f"\n3Ô∏è‚É£ VERIFICANDO CHROMADB:")
    
    if 'paths' not in cfg or 'chroma_db_path' not in cfg['paths']:
        print(f"‚ùå Path ChromaDB no configurado")
        return
    
    chroma_path = cfg['paths']['chroma_db_path']
    print(f"üìÅ Path ChromaDB: {chroma_path}")
    
    if not os.path.exists(chroma_path):
        print(f"‚ùå Directorio ChromaDB no existe: {chroma_path}")
        return
    
    try:
        client = chromadb.PersistentClient(path=chroma_path)
        available_collections = [c.name for c in client.list_collections()]
        print(f"‚úÖ ChromaDB conectado")
        print(f"üìö Colecciones disponibles: {available_collections}")
        
        # 4. Verificar si existe la colecci√≥n seleccionada
        print(f"\n4Ô∏è‚É£ VERIFICACI√ìN DE COLECCI√ìN:")
        if collection_name in available_collections:
            print(f"‚úÖ Colecci√≥n '{collection_name}' EXISTE")
            
            # Informaci√≥n adicional de la colecci√≥n
            try:
                collection = client.get_collection(collection_name)
                count = collection.count()
                print(f"üìä Documentos en colecci√≥n: {count}")
                
                # Muestra de metadatos
                if count > 0:
                    sample = collection.get(limit=1, include=['metadatas'])
                    if sample['metadatas']:
                        print(f"üè∑Ô∏è Ejemplo de metadatos:")
                        meta = sample['metadatas'][0]
                        for key, value in meta.items():
                            print(f"   {key}: {value}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error accediendo a colecci√≥n: {e}")
                
        else:
            print(f"‚ùå Colecci√≥n '{collection_name}' NO EXISTE")
            print(f"üí° Colecciones disponibles: {available_collections}")
            
            # Sugerir soluciones
            print(f"\nüîß POSIBLES SOLUCIONES:")
            
            if available_collections:
                print(f"   A) Usar colecci√≥n existente - cambiar config.yaml:")
                for i, col in enumerate(available_collections, 1):
                    print(f"      {i}. collection.name: '{col}'")
                
                print(f"   B) Cambiar modo:")
                other_mode = "finetuneado" if mode == "embedding" else "embedding"
                other_collection = collection_config['name_finetuneado'] if mode == 'embedding' else collection_config['name']
                if other_collection in available_collections:
                    print(f"      Usar mode='{other_mode}' ‚Üí colecci√≥n '{other_collection}'")
            
            print(f"   C) Crear la colecci√≥n ejecutando script de indexaci√≥n")
            
    except Exception as e:
        print(f"‚ùå Error conectando ChromaDB: {e}")
        return
    
    # 5. Verificar modelos configurados
    print(f"\n5Ô∏è‚É£ VERIFICANDO MODELOS:")
    if 'model' in cfg:
        model_config = cfg['model']
        model_name = model_config.get(f'name_{mode}', 'NO CONFIGURADO')
        cross_encoder_name = model_config.get('name_cross_encoder', 'NO CONFIGURADO')
        
        print(f"ü§ñ Modelo {mode}: {model_name}")
        print(f"üîÑ Cross-Encoder: {cross_encoder_name}")
        
        # Verificar si existen
        try:
            from sentence_transformers import SentenceTransformer, CrossEncoder
            
            # Test Bi-Encoder
            try:
                test_bi = SentenceTransformer(model_name)
                print(f"‚úÖ Bi-Encoder accesible")
            except Exception as e:
                print(f"‚ùå Error Bi-Encoder: {e}")
            
            # Test Cross-Encoder
            try:
                test_cross = CrossEncoder(cross_encoder_name)
                print(f"‚úÖ Cross-Encoder accesible")
            except Exception as e:
                print(f"‚ùå Error Cross-Encoder: {e}")
                
        except ImportError as e:
            print(f"‚ùå Error importando SentenceTransformers: {e}")
    
    print(f"\n" + "="*60)
    print(f"üéØ RESUMEN DEL PROBLEMA:")
    
    if collection_name in available_collections:
        print(f"‚úÖ La colecci√≥n existe - problema puede ser en otra parte")
        print(f"üí° Verifica imports y dependencias")
    else:
        print(f"‚ùå La colecci√≥n '{collection_name}' no existe")
        print(f"üí° Soluci√≥n m√°s probable: cambiar nombre en config.yaml")

def fix_config_collection(config_path: str, correct_collection_name: str, mode: str = "embedding"):
    """
    Corrige autom√°ticamente el nombre de colecci√≥n en config.yaml
    
    Args:
        config_path: Ruta al config.yaml
        correct_collection_name: Nombre correcto de la colecci√≥n
        mode: Modo a corregir
    """
    
    print(f"\nüîß CORRIGIENDO CONFIG...")
    
    try:
        # Leer config actual
        with open(config_path) as f:
            cfg = yaml.safe_load(f)
        
        # Backup
        backup_path = config_path + ".backup"
        with open(backup_path, 'w') as f:
            yaml.dump(cfg, f, default_flow_style=False)
        print(f"üíæ Backup guardado: {backup_path}")
        
        # Corregir nombre
        if mode == "embedding":
            cfg['collection']['name'] = correct_collection_name
        else:
            cfg['collection']['name_finetuneado'] = correct_collection_name
        
        # Guardar config corregido
        with open(config_path, 'w') as f:
            yaml.dump(cfg, f, default_flow_style=False, allow_unicode=True)
        
        print(f"‚úÖ Config corregido:")
        print(f"   collection.{mode}: '{correct_collection_name}'")
        
    except Exception as e:
        print(f"‚ùå Error corrigiendo config: {e}")

def test_bm25_evaluator(config_path: str, mode: str = "embedding"):
    """
    Test completo de BM25DualChunkEvaluator
    
    Args:
        config_path: Ruta al config.yaml
        mode: Modo a probar
    """
    
    print(f"\nüß™ TESTING BM25DUALCHUNKEVALUATOR")
    print(f"="*50)
    
    try:
        # Importar clase
        sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
        from retrieval.bm25_model_chunk_bge import BM25DualChunkEvaluator
        
        print(f"‚úÖ Clase importada correctamente")
        
        # Crear instancia
        print(f"üîÑ Creando instancia...")
        evaluator = BM25DualChunkEvaluator(config_path, mode)
        print(f"‚úÖ Instancia creada")
        
        # Cargar colecci√≥n
        print(f"üîÑ Cargando colecci√≥n...")
        evaluator.load_collection()
        print(f"‚úÖ Colecci√≥n cargada")
        
        # Informaci√≥n de la colecci√≥n cargada
        print(f"üìä INFORMACI√ìN DE LA COLECCI√ìN:")
        print(f"   Chunks totales: {len(evaluator.chunk_ids)}")
        print(f"   Metadatos: {len(evaluator.metadatas)}")
        print(f"   Documentos raw: {len(evaluator.docs_raw)}")
        
        # Test r√°pido de retrieval
        print(f"\nüß™ TEST DE RETRIEVAL:")
        test_query = "s√≠ntomas diabetes"
        
        try:
            bm25_results = evaluator.calculate_bm25_rankings(test_query)
            print(f"‚úÖ BM25: {len(bm25_results)} resultados")
        except Exception as e:
            print(f"‚ùå Error BM25: {e}")
        
        try:
            biencoder_results = evaluator.calculate_biencoder_rankings(test_query)
            print(f"‚úÖ Bi-Encoder: {len(biencoder_results)} resultados")
        except Exception as e:
            print(f"‚ùå Error Bi-Encoder: {e}")
        
        print(f"‚úÖ BM25DualChunkEvaluator funcionando correctamente")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando BM25DualChunkEvaluator: {e}")
        print(f"üí° Verifica la ruta del archivo")
        return False
    except Exception as e:
        print(f"‚ùå Error en BM25DualChunkEvaluator: {e}")
        return False

def main():
    """Funci√≥n principal de debugging"""
    
    print("üîç DEBUGGER PARA BM25DUALCHUNKEVALUATOR")
    print("="*60)
    
    # Configuraci√≥n - AJUSTAR ESTAS RUTAS
    config_path = "../config.yaml"  # Ajustar seg√∫n tu estructura
    mode = "embedding"  # o "finetuneado"
    
    print(f"üìÅ Config: {config_path}")
    print(f"üîß Modo: {mode}")
    
    # 1. Debug completo
    debug_collection_issue(config_path, mode)
    
    # 2. Si quieres corregir autom√°ticamente (opcional)
    # fix_collection = input("\n¬øQuieres corregir el config? (y/n): ")
    # if fix_collection.lower() == 'y':
    #     correct_name = input("Nombre correcto de colecci√≥n: ")
    #     fix_config_collection(config_path, correct_name, mode)
    
    # 3. Test final
    print(f"\n" + "="*60)
    test_success = test_bm25_evaluator(config_path, mode)
    
    if test_success:
        print(f"\nüéâ TODO FUNCIONANDO CORRECTAMENTE")
        print(f"‚úÖ BM25DualChunkEvaluator listo para usar")
    else:
        print(f"\n‚ùå PROBLEMAS IDENTIFICADOS")
        print(f"üí° Revisa los errores mostrados arriba")

if __name__ == "__main__":
    main()